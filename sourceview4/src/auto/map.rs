// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk;
use gtk_source_sys;
use pango;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use View;

glib_wrapper! {
    pub struct Map(Object<gtk_source_sys::GtkSourceMap, gtk_source_sys::GtkSourceMapClass, MapClass>) @extends View, gtk::TextView, gtk::Container, gtk::Widget;

    match fn {
        get_type => || gtk_source_sys::gtk_source_map_get_type(),
    }
}

impl Map {
    pub fn new() -> Map {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(gtk_source_sys::gtk_source_map_new()).unsafe_cast()
        }
    }
}

impl Default for Map {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_MAP: Option<&Map> = None;

pub trait MapExt: 'static {
    fn get_view(&self) -> Option<View>;

    fn set_view<P: IsA<View>>(&self, view: &P);

    fn get_property_font_desc(&self) -> Option<pango::FontDescription>;

    fn set_property_font_desc(&self, font_desc: Option<&pango::FontDescription>);

    fn connect_property_font_desc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Map>> MapExt for O {
    fn get_view(&self) -> Option<View> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_map_get_view(self.as_ref().to_glib_none().0))
        }
    }

    fn set_view<P: IsA<View>>(&self, view: &P) {
        unsafe {
            gtk_source_sys::gtk_source_map_set_view(self.as_ref().to_glib_none().0, view.as_ref().to_glib_none().0);
        }
    }

    fn get_property_font_desc(&self) -> Option<pango::FontDescription> {
        unsafe {
            let mut value = Value::from_type(<pango::FontDescription as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"font-desc\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `font-desc` getter")
        }
    }

    fn set_property_font_desc(&self, font_desc: Option<&pango::FontDescription>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"font-desc\0".as_ptr() as *const _, Value::from(font_desc).to_glib_none().0);
        }
    }

    fn connect_property_font_desc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_font_desc_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceMap, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Map>
        {
            let f: &F = &*(f as *const F);
            f(&Map::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::font-desc\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_font_desc_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_view_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceMap, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Map>
        {
            let f: &F = &*(f as *const F);
            f(&Map::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::view\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_view_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Map {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Map")
    }
}
