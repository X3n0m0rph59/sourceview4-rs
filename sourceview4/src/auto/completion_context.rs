// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Completion;
use CompletionActivation;
use CompletionProposal;
use CompletionProvider;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct CompletionContext(Object<gtk_source_sys::GtkSourceCompletionContext, gtk_source_sys::GtkSourceCompletionContextClass, CompletionContextClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_completion_context_get_type(),
    }
}

pub const NONE_COMPLETION_CONTEXT: Option<&CompletionContext> = None;

/// Trait containing all `CompletionContext` methods.
///
/// # Implementors
///
/// [`CompletionContext`](struct.CompletionContext.html)
pub trait CompletionContextExt: 'static {
    /// Providers can use this function to add proposals to the completion. They
    /// can do so asynchronously by means of the `finished` argument. Providers must
    /// ensure that they always call this function with `finished` set to `true`
    /// once each population (even if no proposals need to be added).
    /// Population occurs when the `CompletionProvider::populate`
    /// function is called.
    /// ## `provider`
    /// a `CompletionProvider`.
    /// ## `proposals`
    /// The list of proposals to add.
    /// ## `finished`
    /// Whether the provider is finished adding proposals.
    fn add_proposals<P: IsA<CompletionProvider>>(&self, provider: &P, proposals: &[CompletionProposal], finished: bool);

    /// Get the context activation.
    ///
    /// # Returns
    ///
    /// The context activation.
    fn get_activation(&self) -> CompletionActivation;

    /// Get the iter at which the completion was invoked. Providers can use this
    /// to determine how and if to match proposals.
    /// ## `iter`
    /// a `gtk::TextIter`.
    ///
    /// # Returns
    ///
    /// `true` if `iter` is correctly set, `false` otherwise.
    fn get_iter(&self) -> Option<gtk::TextIter>;

    /// The completion activation
    fn set_property_activation(&self, activation: CompletionActivation);

    /// The `Completion` associated with the context.
    fn get_property_completion(&self) -> Option<Completion>;

    /// The `gtk::TextIter` at which the completion is invoked.
    fn set_property_iter(&self, iter: Option<&gtk::TextIter>);

    /// Emitted when the current population of proposals has been cancelled.
    /// Providers adding proposals asynchronously should connect to this signal
    /// to know when to cancel running proposal queries.
    fn connect_cancelled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_cancelled(&self);

    fn connect_property_activation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_iter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<CompletionContext>> CompletionContextExt for O {
    fn add_proposals<P: IsA<CompletionProvider>>(&self, provider: &P, proposals: &[CompletionProposal], finished: bool) {
        unsafe {
            gtk_source_sys::gtk_source_completion_context_add_proposals(self.as_ref().to_glib_none().0, provider.as_ref().to_glib_none().0, proposals.to_glib_none().0, finished.to_glib());
        }
    }

    fn get_activation(&self) -> CompletionActivation {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_completion_context_get_activation(self.as_ref().to_glib_none().0))
        }
    }

    fn get_iter(&self) -> Option<gtk::TextIter> {
        unsafe {
            let mut iter = gtk::TextIter::uninitialized();
            let ret = from_glib(gtk_source_sys::gtk_source_completion_context_get_iter(self.as_ref().to_glib_none().0, iter.to_glib_none_mut().0));
            if ret { Some(iter) } else { None }
        }
    }

    fn set_property_activation(&self, activation: CompletionActivation) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"activation\0".as_ptr() as *const _, Value::from(&activation).to_glib_none().0);
        }
    }

    fn get_property_completion(&self) -> Option<Completion> {
        unsafe {
            let mut value = Value::from_type(<Completion as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"completion\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_iter(&self, iter: Option<&gtk::TextIter>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"iter\0".as_ptr() as *const _, Value::from(iter).to_glib_none().0);
        }
    }

    fn connect_cancelled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cancelled_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletionContext, f: glib_sys::gpointer)
            where P: IsA<CompletionContext>
        {
            let f: &F = &*(f as *const F);
            f(&CompletionContext::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cancelled\0".as_ptr() as *const _,
                Some(transmute(cancelled_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_cancelled(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject).emit("cancelled", &[]).unwrap() };
    }

    fn connect_property_activation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_activation_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletionContext, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<CompletionContext>
        {
            let f: &F = &*(f as *const F);
            f(&CompletionContext::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::activation\0".as_ptr() as *const _,
                Some(transmute(notify_activation_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_iter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_iter_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletionContext, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<CompletionContext>
        {
            let f: &F = &*(f as *const F);
            f(&CompletionContext::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::iter\0".as_ptr() as *const _,
                Some(transmute(notify_iter_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for CompletionContext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CompletionContext")
    }
}
