// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use gtk;
use gtk_source_sys;
use std::fmt;
use GutterRenderer;
use View;

glib_wrapper! {
    pub struct Gutter(Object<gtk_source_sys::GtkSourceGutter, gtk_source_sys::GtkSourceGutterClass, GutterClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_gutter_get_type(),
    }
}

#[derive(Clone, Default)]
pub struct GutterBuilder {
    view: Option<View>,
    window_type: Option<gtk::TextWindowType>,
}

impl GutterBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> Gutter {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref view) = self.view {
            properties.push(("view", view));
        }
        if let Some(ref window_type) = self.window_type {
            properties.push(("window-type", window_type));
        }
        let ret = glib::Object::new(Gutter::static_type(), &properties)
            .expect("object new")
            .downcast::<Gutter>()
            .expect("downcast");
        ret
    }

    pub fn view<P: IsA<View>>(mut self, view: &P) -> Self {
        self.view = Some(view.clone().upcast());
        self
    }

    pub fn window_type(mut self, window_type: gtk::TextWindowType) -> Self {
        self.window_type = Some(window_type);
        self
    }
}

pub const NONE_GUTTER: Option<&Gutter> = None;

pub trait GutterExt: 'static {
    fn get_renderer_at_pos(&self, x: i32, y: i32) -> Option<GutterRenderer>;

    fn get_view(&self) -> Option<View>;

    fn get_window_type(&self) -> gtk::TextWindowType;

    fn insert<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32) -> bool;

    fn queue_draw(&self);

    fn remove<P: IsA<GutterRenderer>>(&self, renderer: &P);

    fn reorder<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32);
}

impl<O: IsA<Gutter>> GutterExt for O {
    fn get_renderer_at_pos(&self, x: i32, y: i32) -> Option<GutterRenderer> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_gutter_get_renderer_at_pos(
                self.as_ref().to_glib_none().0,
                x,
                y,
            ))
        }
    }

    fn get_view(&self) -> Option<View> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_gutter_get_view(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_window_type(&self) -> gtk::TextWindowType {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_gutter_get_window_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn insert<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32) -> bool {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_gutter_insert(
                self.as_ref().to_glib_none().0,
                renderer.as_ref().to_glib_none().0,
                position,
            ))
        }
    }

    fn queue_draw(&self) {
        unsafe {
            gtk_source_sys::gtk_source_gutter_queue_draw(self.as_ref().to_glib_none().0);
        }
    }

    fn remove<P: IsA<GutterRenderer>>(&self, renderer: &P) {
        unsafe {
            gtk_source_sys::gtk_source_gutter_remove(
                self.as_ref().to_glib_none().0,
                renderer.as_ref().to_glib_none().0,
            );
        }
    }

    fn reorder<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32) {
        unsafe {
            gtk_source_sys::gtk_source_gutter_reorder(
                self.as_ref().to_glib_none().0,
                renderer.as_ref().to_glib_none().0,
                position,
            );
        }
    }
}

impl fmt::Display for Gutter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Gutter")
    }
}
