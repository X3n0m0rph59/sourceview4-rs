// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use gtk;
use gtk_source_sys;
use std::fmt;

glib_wrapper! {
    pub struct Region(Object<gtk_source_sys::GtkSourceRegion, gtk_source_sys::GtkSourceRegionClass, RegionClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_region_get_type(),
    }
}

impl Region {
    /// ## `buffer`
    /// a `gtk::TextBuffer`.
    ///
    /// # Returns
    ///
    /// a new `Region` object for `buffer`.
    pub fn new<P: IsA<gtk::TextBuffer>>(buffer: &P) -> Region {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_source_sys::gtk_source_region_new(buffer.as_ref().to_glib_none().0))
        }
    }
}

pub const NONE_REGION: Option<&Region> = None;

/// Trait containing all `Region` methods.
///
/// # Implementors
///
/// [`Region`](struct.Region.html)
pub trait RegionExt: 'static {
    /// Adds `region_to_add` to `self`. `region_to_add` is not modified.
    /// ## `region_to_add`
    /// the `Region` to add to `self`, or `None`.
    fn add_region<P: IsA<Region>>(&self, region_to_add: Option<&P>);

    /// Adds the subregion delimited by `_start` and `_end` to `self`.
    /// ## `_start`
    /// the start of the subregion.
    /// ## `_end`
    /// the end of the subregion.
    fn add_subregion(&self, _start: &gtk::TextIter, _end: &gtk::TextIter);

    /// Gets the `start` and `end` bounds of the `self`.
    /// ## `start`
    /// iterator to initialize with the start of `self`,
    ///  or `None`.
    /// ## `end`
    /// iterator to initialize with the end of `self`,
    ///  or `None`.
    ///
    /// # Returns
    ///
    /// `true` if `start` and `end` have been set successfully (if non-`None`),
    ///  or `false` if the `self` is empty.
    fn get_bounds(&self) -> Option<(gtk::TextIter, gtk::TextIter)>;

    ///
    /// # Returns
    ///
    /// the `gtk::TextBuffer`.
    fn get_buffer(&self) -> Option<gtk::TextBuffer>;

    //fn get_start_region_iter(&self, iter: /*Ignored*/RegionIter);

    /// Returns the intersection between `self` and `region2`. `self` and
    /// `region2` are not modified.
    /// ## `region2`
    /// a `Region`, or `None`.
    ///
    /// # Returns
    ///
    /// the intersection as a `Region`
    ///  object.
    fn intersect_region<P: IsA<Region>>(&self, region2: Option<&P>) -> Option<Region>;

    /// Returns the intersection between `self` and the subregion delimited by
    /// `_start` and `_end`. `self` is not modified.
    /// ## `_start`
    /// the start of the subregion.
    /// ## `_end`
    /// the end of the subregion.
    ///
    /// # Returns
    ///
    /// the intersection as a new
    ///  `Region`.
    fn intersect_subregion(&self, _start: &gtk::TextIter, _end: &gtk::TextIter) -> Option<Region>;

    /// Returns whether the `self` is empty. A `None` `self` is considered empty.
    ///
    /// # Returns
    ///
    /// whether the `self` is empty.
    fn is_empty(&self) -> bool;

    /// Subtracts `region_to_subtract` from `self`. `region_to_subtract` is not
    /// modified.
    /// ## `region_to_subtract`
    /// the `Region` to subtract from
    ///  `self`, or `None`.
    fn subtract_region<P: IsA<Region>>(&self, region_to_subtract: Option<&P>);

    /// Subtracts the subregion delimited by `_start` and `_end` from `self`.
    /// ## `_start`
    /// the start of the subregion.
    /// ## `_end`
    /// the end of the subregion.
    fn subtract_subregion(&self, _start: &gtk::TextIter, _end: &gtk::TextIter);

    /// Gets a string represention of `self`, for debugging purposes.
    ///
    /// The returned string contains the character offsets of the subregions. It
    /// doesn't include a newline character at the end of the string.
    ///
    /// # Returns
    ///
    /// a string represention of `self`. Free
    ///  with `g_free` when no longer needed.
    fn to_string(&self) -> GString;
}

impl<O: IsA<Region>> RegionExt for O {
    fn add_region<P: IsA<Region>>(&self, region_to_add: Option<&P>) {
        unsafe {
            gtk_source_sys::gtk_source_region_add_region(self.as_ref().to_glib_none().0, region_to_add.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    fn add_subregion(&self, _start: &gtk::TextIter, _end: &gtk::TextIter) {
        unsafe {
            gtk_source_sys::gtk_source_region_add_subregion(self.as_ref().to_glib_none().0, _start.to_glib_none().0, _end.to_glib_none().0);
        }
    }

    fn get_bounds(&self) -> Option<(gtk::TextIter, gtk::TextIter)> {
        unsafe {
            let mut start = gtk::TextIter::uninitialized();
            let mut end = gtk::TextIter::uninitialized();
            let ret = from_glib(gtk_source_sys::gtk_source_region_get_bounds(self.as_ref().to_glib_none().0, start.to_glib_none_mut().0, end.to_glib_none_mut().0));
            if ret { Some((start, end)) } else { None }
        }
    }

    fn get_buffer(&self) -> Option<gtk::TextBuffer> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_region_get_buffer(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_start_region_iter(&self, iter: /*Ignored*/RegionIter) {
    //    unsafe { TODO: call gtk_source_sys:gtk_source_region_get_start_region_iter() }
    //}

    fn intersect_region<P: IsA<Region>>(&self, region2: Option<&P>) -> Option<Region> {
        unsafe {
            from_glib_full(gtk_source_sys::gtk_source_region_intersect_region(self.as_ref().to_glib_none().0, region2.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    fn intersect_subregion(&self, _start: &gtk::TextIter, _end: &gtk::TextIter) -> Option<Region> {
        unsafe {
            from_glib_full(gtk_source_sys::gtk_source_region_intersect_subregion(self.as_ref().to_glib_none().0, _start.to_glib_none().0, _end.to_glib_none().0))
        }
    }

    fn is_empty(&self) -> bool {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_region_is_empty(self.as_ref().to_glib_none().0))
        }
    }

    fn subtract_region<P: IsA<Region>>(&self, region_to_subtract: Option<&P>) {
        unsafe {
            gtk_source_sys::gtk_source_region_subtract_region(self.as_ref().to_glib_none().0, region_to_subtract.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    fn subtract_subregion(&self, _start: &gtk::TextIter, _end: &gtk::TextIter) {
        unsafe {
            gtk_source_sys::gtk_source_region_subtract_subregion(self.as_ref().to_glib_none().0, _start.to_glib_none().0, _end.to_glib_none().0);
        }
    }

    fn to_string(&self) -> GString {
        unsafe {
            from_glib_full(gtk_source_sys::gtk_source_region_to_string(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for Region {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Region")
    }
}
