// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Style;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct StyleScheme(Object<gtk_source_sys::GtkSourceStyleScheme, gtk_source_sys::GtkSourceStyleSchemeClass, StyleSchemeClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_style_scheme_get_type(),
    }
}

pub const NONE_STYLE_SCHEME: Option<&StyleScheme> = None;

/// Trait containing all `StyleScheme` methods.
///
/// # Implementors
///
/// [`StyleScheme`](struct.StyleScheme.html)
pub trait StyleSchemeExt: 'static {
    ///
    /// # Returns
    ///
    /// a
    /// `None`-terminated array containing the `self` authors or `None` if
    /// no author is specified by the style scheme.
    fn get_authors(&self) -> Vec<GString>;

    ///
    /// # Returns
    ///
    /// `self` description (if defined), or `None`.
    fn get_description(&self) -> Option<GString>;

    ///
    /// # Returns
    ///
    /// `self` file name if the scheme was created
    /// parsing a style scheme file or `None` in the other cases.
    fn get_filename(&self) -> Option<GString>;

    ///
    /// # Returns
    ///
    /// `self` id.
    fn get_id(&self) -> Option<GString>;

    ///
    /// # Returns
    ///
    /// `self` name.
    fn get_name(&self) -> Option<GString>;

    /// ## `style_id`
    /// id of the style to retrieve.
    ///
    /// # Returns
    ///
    /// style which corresponds to `style_id` in
    /// the `self`, or `None` when no style with this name found. It is owned by
    /// `self` and may not be unref'ed.
    fn get_style(&self, style_id: &str) -> Option<Style>;

    fn connect_property_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_filename_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<StyleScheme>> StyleSchemeExt for O {
    fn get_authors(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gtk_source_sys::gtk_source_style_scheme_get_authors(self.as_ref().to_glib_none().0))
        }
    }

    fn get_description(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_style_scheme_get_description(self.as_ref().to_glib_none().0))
        }
    }

    fn get_filename(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_style_scheme_get_filename(self.as_ref().to_glib_none().0))
        }
    }

    fn get_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_style_scheme_get_id(self.as_ref().to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_style_scheme_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_style(&self, style_id: &str) -> Option<Style> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_style_scheme_get_style(self.as_ref().to_glib_none().0, style_id.to_glib_none().0))
        }
    }

    fn connect_property_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceStyleScheme, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<StyleScheme>
        {
            let f: &F = &*(f as *const F);
            f(&StyleScheme::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(transmute(notify_description_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_filename_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_filename_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceStyleScheme, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<StyleScheme>
        {
            let f: &F = &*(f as *const F);
            f(&StyleScheme::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::filename\0".as_ptr() as *const _,
                Some(transmute(notify_filename_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceStyleScheme, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<StyleScheme>
        {
            let f: &F = &*(f as *const F);
            f(&StyleScheme::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute(notify_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for StyleScheme {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StyleScheme")
    }
}
