// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Buffer;
use Error;
use SearchSettings;
use Style;
#[cfg(feature = "futures")]
use futures::future;
use gio;
use gio_sys;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct SearchContext(Object<gtk_source_sys::GtkSourceSearchContext, gtk_source_sys::GtkSourceSearchContextClass, SearchContextClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_search_context_get_type(),
    }
}

impl SearchContext {
    /// Creates a new search context, associated with `buffer`, and customized with
    /// `settings`. If `settings` is `None`, a new `SearchSettings` object will
    /// be created, that you can retrieve with
    /// `SearchContextExt::get_settings`.
    /// ## `buffer`
    /// a `Buffer`.
    /// ## `settings`
    /// a `SearchSettings`, or `None`.
    ///
    /// # Returns
    ///
    /// a new search context.
    pub fn new<P: IsA<Buffer>, Q: IsA<SearchSettings>>(buffer: &P, settings: Option<&Q>) -> SearchContext {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(gtk_source_sys::gtk_source_search_context_new(buffer.as_ref().to_glib_none().0, settings.map(|p| p.as_ref()).to_glib_none().0))
        }
    }
}

pub const NONE_SEARCH_CONTEXT: Option<&SearchContext> = None;

/// Trait containing all `SearchContext` methods.
///
/// # Implementors
///
/// [`SearchContext`](struct.SearchContext.html)
pub trait SearchContextExt: 'static {
    /// Synchronous backward search. It is recommended to use the asynchronous
    /// functions instead, to not block the user interface. However, if you are sure
    /// that the `buffer` is small, this function is more convenient to use.
    ///
    /// If the `SearchSettings:wrap-around` property is `false`, this function
    /// doesn't try to wrap around.
    ///
    /// The `has_wrapped_around` out parameter is set independently of whether a match
    /// is found. So if this function returns `false`, `has_wrapped_around` will have
    /// the same value as the `SearchSettings:wrap-around` property.
    /// ## `iter`
    /// start of search.
    /// ## `match_start`
    /// return location for start of match, or `None`.
    /// ## `match_end`
    /// return location for end of match, or `None`.
    /// ## `has_wrapped_around`
    /// return location to know whether the
    ///  search has wrapped around, or `None`.
    ///
    /// # Returns
    ///
    /// whether a match was found.
    fn backward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)>;

    /// The asynchronous version of `SearchContextExt::backward`.
    ///
    /// See the documentation of `SearchContextExt::backward` for more
    /// details.
    ///
    /// See the `gio::AsyncResult` documentation to know how to use this function.
    ///
    /// If the operation is cancelled, the `callback` will only be called if
    /// `cancellable` was not `None`. `SearchContextExt::backward_async` takes
    /// ownership of `cancellable`, so you can unref it after calling this function.
    /// ## `iter`
    /// start of search.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`.
    /// ## `callback`
    /// a `GAsyncReadyCallback` to call when the operation is finished.
    /// ## `user_data`
    /// the data to pass to the `callback` function.
    fn backward_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), Error>) + Send + 'static>(&self, iter: &gtk::TextIter, cancellable: Option<&P>, callback: Q);

    #[cfg(feature = "futures")]
    fn backward_async_future(&self, iter: &gtk::TextIter) -> Box_<dyn future::Future<Output = Result<(gtk::TextIter, gtk::TextIter, bool), Error>> + std::marker::Unpin>;

    /// Synchronous forward search. It is recommended to use the asynchronous
    /// functions instead, to not block the user interface. However, if you are sure
    /// that the `buffer` is small, this function is more convenient to use.
    ///
    /// If the `SearchSettings:wrap-around` property is `false`, this function
    /// doesn't try to wrap around.
    ///
    /// The `has_wrapped_around` out parameter is set independently of whether a match
    /// is found. So if this function returns `false`, `has_wrapped_around` will have
    /// the same value as the `SearchSettings:wrap-around` property.
    /// ## `iter`
    /// start of search.
    /// ## `match_start`
    /// return location for start of match, or `None`.
    /// ## `match_end`
    /// return location for end of match, or `None`.
    /// ## `has_wrapped_around`
    /// return location to know whether the
    ///  search has wrapped around, or `None`.
    ///
    /// # Returns
    ///
    /// whether a match was found.
    fn forward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)>;

    /// The asynchronous version of `SearchContextExt::forward`.
    ///
    /// See the documentation of `SearchContextExt::forward` for more
    /// details.
    ///
    /// See the `gio::AsyncResult` documentation to know how to use this function.
    ///
    /// If the operation is cancelled, the `callback` will only be called if
    /// `cancellable` was not `None`. `SearchContextExt::forward_async` takes
    /// ownership of `cancellable`, so you can unref it after calling this function.
    /// ## `iter`
    /// start of search.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`.
    /// ## `callback`
    /// a `GAsyncReadyCallback` to call when the operation is finished.
    /// ## `user_data`
    /// the data to pass to the `callback` function.
    fn forward_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), Error>) + Send + 'static>(&self, iter: &gtk::TextIter, cancellable: Option<&P>, callback: Q);

    #[cfg(feature = "futures")]
    fn forward_async_future(&self, iter: &gtk::TextIter) -> Box_<dyn future::Future<Output = Result<(gtk::TextIter, gtk::TextIter, bool), Error>> + std::marker::Unpin>;

    ///
    /// # Returns
    ///
    /// the associated buffer.
    fn get_buffer(&self) -> Option<Buffer>;

    ///
    /// # Returns
    ///
    /// whether to highlight the search occurrences.
    fn get_highlight(&self) -> bool;

    ///
    /// # Returns
    ///
    /// the `Style` to apply on search matches.
    fn get_match_style(&self) -> Option<Style>;

    /// Gets the position of a search occurrence. If the buffer is not already fully
    /// scanned, the position may be unknown, and -1 is returned. If 0 is returned,
    /// it means that this part of the buffer has already been scanned, and that
    /// `match_start` and `match_end` don't delimit an occurrence.
    /// ## `match_start`
    /// the start of the occurrence.
    /// ## `match_end`
    /// the end of the occurrence.
    ///
    /// # Returns
    ///
    /// the position of the search occurrence. The first occurrence has the
    /// position 1 (not 0). Returns 0 if `match_start` and `match_end` don't delimit
    /// an occurrence. Returns -1 if the position is not yet known.
    fn get_occurrence_position(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter) -> i32;

    /// Gets the total number of search occurrences. If the buffer is not already
    /// fully scanned, the total number of occurrences is unknown, and -1 is
    /// returned.
    ///
    /// # Returns
    ///
    /// the total number of search occurrences, or -1 if unknown.
    fn get_occurrences_count(&self) -> i32;

    /// Regular expression patterns must follow certain rules. If
    /// `SearchSettings:search-text` breaks a rule, the error can be retrieved
    /// with this function. The error domain is `G_REGEX_ERROR`.
    ///
    /// Free the return value with `glib::Error::free`.
    ///
    /// # Returns
    ///
    /// the `glib::Error`, or `None` if the pattern is valid.
    fn get_regex_error(&self) -> Option<Error>;

    ///
    /// # Returns
    ///
    /// the search settings.
    fn get_settings(&self) -> Option<SearchSettings>;

    /// Replaces a search match by another text. If `match_start` and `match_end`
    /// doesn't correspond to a search match, `false` is returned.
    ///
    /// `match_start` and `match_end` iters are revalidated to point to the replacement
    /// text boundaries.
    ///
    /// For a regular expression replacement, you can check if `replace` is valid by
    /// calling `glib::Regex::check_replacement`. The `replace` text can contain
    /// backreferences; read the `glib::Regex::replace` documentation for more details.
    /// ## `match_start`
    /// the start of the match to replace.
    /// ## `match_end`
    /// the end of the match to replace.
    /// ## `replace`
    /// the replacement text.
    /// ## `replace_length`
    /// the length of `replace` in bytes, or -1.
    ///
    /// # Returns
    ///
    /// whether the match has been replaced.
    fn replace(&self, match_start: &mut gtk::TextIter, match_end: &mut gtk::TextIter, replace: &str) -> Result<(), Error>;

    /// Replaces all search matches by another text. It is a synchronous function, so
    /// it can block the user interface.
    ///
    /// For a regular expression replacement, you can check if `replace` is valid by
    /// calling `glib::Regex::check_replacement`. The `replace` text can contain
    /// backreferences; read the `glib::Regex::replace` documentation for more details.
    /// ## `replace`
    /// the replacement text.
    /// ## `replace_length`
    /// the length of `replace` in bytes, or -1.
    ///
    /// # Returns
    ///
    /// the number of replaced matches.
    fn replace_all(&self, replace: &str) -> Result<(), Error>;

    /// Enables or disables the search occurrences highlighting.
    /// ## `highlight`
    /// the setting.
    fn set_highlight(&self, highlight: bool);

    /// Set the style to apply on search matches. If `match_style` is `None`, default
    /// theme's scheme 'match-style' will be used.
    /// To enable or disable the search highlighting, use
    /// `SearchContextExt::set_highlight`.
    /// ## `match_style`
    /// a `Style`, or `None`.
    fn set_match_style(&self, match_style: Option<&Style>);

    fn connect_property_highlight_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_match_style_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_occurrences_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_regex_error_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SearchContext>> SearchContextExt for O {
    fn backward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)> {
        unsafe {
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::uninitialized();
            let ret = from_glib(gtk_source_sys::gtk_source_search_context_backward(self.as_ref().to_glib_none().0, iter.to_glib_none().0, match_start.to_glib_none_mut().0, match_end.to_glib_none_mut().0, &mut has_wrapped_around));
            if ret { Some((match_start, match_end, from_glib(has_wrapped_around))) } else { None }
        }
    }

    fn backward_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), Error>) + Send + 'static>(&self, iter: &gtk::TextIter, cancellable: Option<&P>, callback: Q) {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn backward_async_trampoline<Q: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::uninitialized();
            let _ = gtk_source_sys::gtk_source_search_context_backward_finish(_source_object as *mut _, res, match_start.to_glib_none_mut().0, match_end.to_glib_none_mut().0, &mut has_wrapped_around, &mut error);
            let result = if error.is_null() { Ok((match_start, match_end, from_glib(has_wrapped_around))) } else { Err(from_glib_full(error)) };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = backward_async_trampoline::<Q>;
        unsafe {
            gtk_source_sys::gtk_source_search_context_backward_async(self.as_ref().to_glib_none().0, iter.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box::into_raw(user_data) as *mut _);
        }
    }

    #[cfg(feature = "futures")]
    fn backward_async_future(&self, iter: &gtk::TextIter) -> Box_<dyn future::Future<Output = Result<(gtk::TextIter, gtk::TextIter, bool), Error>> + std::marker::Unpin> {
        use gio::GioFuture;
        use fragile::Fragile;

        let iter = iter.clone();
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = Fragile::new(send);
            obj.backward_async(
                &iter,
                Some(&cancellable),
                move |res| {
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    fn forward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)> {
        unsafe {
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::uninitialized();
            let ret = from_glib(gtk_source_sys::gtk_source_search_context_forward(self.as_ref().to_glib_none().0, iter.to_glib_none().0, match_start.to_glib_none_mut().0, match_end.to_glib_none_mut().0, &mut has_wrapped_around));
            if ret { Some((match_start, match_end, from_glib(has_wrapped_around))) } else { None }
        }
    }

    fn forward_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), Error>) + Send + 'static>(&self, iter: &gtk::TextIter, cancellable: Option<&P>, callback: Q) {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn forward_async_trampoline<Q: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::uninitialized();
            let _ = gtk_source_sys::gtk_source_search_context_forward_finish(_source_object as *mut _, res, match_start.to_glib_none_mut().0, match_end.to_glib_none_mut().0, &mut has_wrapped_around, &mut error);
            let result = if error.is_null() { Ok((match_start, match_end, from_glib(has_wrapped_around))) } else { Err(from_glib_full(error)) };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = forward_async_trampoline::<Q>;
        unsafe {
            gtk_source_sys::gtk_source_search_context_forward_async(self.as_ref().to_glib_none().0, iter.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box::into_raw(user_data) as *mut _);
        }
    }

    #[cfg(feature = "futures")]
    fn forward_async_future(&self, iter: &gtk::TextIter) -> Box_<dyn future::Future<Output = Result<(gtk::TextIter, gtk::TextIter, bool), Error>> + std::marker::Unpin> {
        use gio::GioFuture;
        use fragile::Fragile;

        let iter = iter.clone();
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = Fragile::new(send);
            obj.forward_async(
                &iter,
                Some(&cancellable),
                move |res| {
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    fn get_buffer(&self) -> Option<Buffer> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_search_context_get_buffer(self.as_ref().to_glib_none().0))
        }
    }

    fn get_highlight(&self) -> bool {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_search_context_get_highlight(self.as_ref().to_glib_none().0))
        }
    }

    fn get_match_style(&self) -> Option<Style> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_search_context_get_match_style(self.as_ref().to_glib_none().0))
        }
    }

    fn get_occurrence_position(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter) -> i32 {
        unsafe {
            gtk_source_sys::gtk_source_search_context_get_occurrence_position(self.as_ref().to_glib_none().0, match_start.to_glib_none().0, match_end.to_glib_none().0)
        }
    }

    fn get_occurrences_count(&self) -> i32 {
        unsafe {
            gtk_source_sys::gtk_source_search_context_get_occurrences_count(self.as_ref().to_glib_none().0)
        }
    }

    fn get_regex_error(&self) -> Option<Error> {
        unsafe {
            from_glib_full(gtk_source_sys::gtk_source_search_context_get_regex_error(self.as_ref().to_glib_none().0))
        }
    }

    fn get_settings(&self) -> Option<SearchSettings> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_search_context_get_settings(self.as_ref().to_glib_none().0))
        }
    }

    fn replace(&self, match_start: &mut gtk::TextIter, match_end: &mut gtk::TextIter, replace: &str) -> Result<(), Error> {
        let replace_length = replace.len() as i32;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gtk_source_sys::gtk_source_search_context_replace(self.as_ref().to_glib_none().0, match_start.to_glib_none_mut().0, match_end.to_glib_none_mut().0, replace.to_glib_none().0, replace_length, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn replace_all(&self, replace: &str) -> Result<(), Error> {
        let replace_length = replace.len() as i32;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gtk_source_sys::gtk_source_search_context_replace_all(self.as_ref().to_glib_none().0, replace.to_glib_none().0, replace_length, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_highlight(&self, highlight: bool) {
        unsafe {
            gtk_source_sys::gtk_source_search_context_set_highlight(self.as_ref().to_glib_none().0, highlight.to_glib());
        }
    }

    fn set_match_style(&self, match_style: Option<&Style>) {
        unsafe {
            gtk_source_sys::gtk_source_search_context_set_match_style(self.as_ref().to_glib_none().0, match_style.to_glib_none().0);
        }
    }

    fn connect_property_highlight_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_highlight_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceSearchContext, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SearchContext>
        {
            let f: &F = &*(f as *const F);
            f(&SearchContext::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::highlight\0".as_ptr() as *const _,
                Some(transmute(notify_highlight_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_match_style_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_match_style_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceSearchContext, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SearchContext>
        {
            let f: &F = &*(f as *const F);
            f(&SearchContext::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::match-style\0".as_ptr() as *const _,
                Some(transmute(notify_match_style_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_occurrences_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_occurrences_count_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceSearchContext, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SearchContext>
        {
            let f: &F = &*(f as *const F);
            f(&SearchContext::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::occurrences-count\0".as_ptr() as *const _,
                Some(transmute(notify_occurrences_count_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_regex_error_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_regex_error_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceSearchContext, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SearchContext>
        {
            let f: &F = &*(f as *const F);
            f(&SearchContext::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::regex-error\0".as_ptr() as *const _,
                Some(transmute(notify_regex_error_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for SearchContext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SearchContext")
    }
}
