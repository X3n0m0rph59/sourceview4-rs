// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use CompletionContext;
use CompletionInfo;
use CompletionProvider;
use Error;
use View;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Completion(Object<gtk_source_sys::GtkSourceCompletion, gtk_source_sys::GtkSourceCompletionClass, CompletionClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_completion_get_type(),
    }
}

pub const NONE_COMPLETION: Option<&Completion> = None;

/// Trait containing all `Completion` methods.
///
/// # Implementors
///
/// [`Completion`](struct.Completion.html)
pub trait CompletionExt: 'static {
    /// Add a new `CompletionProvider` to the completion object. This will
    /// add a reference `provider`, so make sure to unref your own copy when you
    /// no longer need it.
    /// ## `provider`
    /// a `CompletionProvider`.
    ///
    /// # Returns
    ///
    /// `true` if `provider` was successfully added, otherwise if `error`
    ///  is provided, it will be set with the error and `false` is returned.
    fn add_provider<P: IsA<CompletionProvider>>(&self, provider: &P) -> Result<(), Error>;

    /// Block interactive completion. This can be used to disable interactive
    /// completion when inserting or deleting text from the buffer associated with
    /// the completion. Use `CompletionExt::unblock_interactive` to enable
    /// interactive completion again.
    ///
    /// This function may be called multiple times. It will continue to block
    /// interactive completion until `CompletionExt::unblock_interactive`
    /// has been called the same number of times.
    fn block_interactive(&self);

    /// The info widget is the window where the completion displays optional extra
    /// information of the proposal.
    ///
    /// # Returns
    ///
    /// The `CompletionInfo` window
    ///  associated with `self`.
    fn get_info_window(&self) -> Option<CompletionInfo>;

    /// Get list of providers registered on `self`. The returned list is owned
    /// by the completion and should not be freed.
    ///
    /// # Returns
    ///
    ///
    /// list of `CompletionProvider`.
    fn get_providers(&self) -> Vec<CompletionProvider>;

    /// The `View` associated with `self`, or `None` if the view has been
    /// destroyed.
    ///
    /// # Returns
    ///
    /// The `View` associated with
    /// `self`, or `None`.
    fn get_view(&self) -> Option<View>;

    /// Hides the completion if it is active (visible).
    fn hide(&self);

    /// Remove `provider` from the completion.
    /// ## `provider`
    /// a `CompletionProvider`.
    ///
    /// # Returns
    ///
    /// `true` if `provider` was successfully removed, otherwise if `error`
    ///  is provided, it will be set with the error and `false` is returned.
    fn remove_provider<P: IsA<CompletionProvider>>(&self, provider: &P) -> Result<(), Error>;

    /// Starts a new completion with the specified `CompletionContext` and
    /// a list of potential candidate providers for completion.
    ///
    /// It can be convenient for showing a completion on-the-fly, without the need to
    /// add or remove providers to the `Completion`.
    ///
    /// Another solution is to add providers with
    /// `CompletionExt::add_provider`, and implement
    /// `CompletionProvider::match` for each provider.
    /// ## `providers`
    ///
    /// a list of `CompletionProvider`, or `None`.
    /// ## `context`
    /// The `CompletionContext`
    /// with which to start the completion.
    ///
    /// # Returns
    ///
    /// `true` if it was possible to the show completion window.
    fn start<P: IsA<CompletionContext>>(&self, providers: &[CompletionProvider], context: &P) -> bool;

    /// Unblock interactive completion. This can be used after using
    /// `CompletionExt::block_interactive` to enable interactive completion
    /// again.
    fn unblock_interactive(&self);

    /// Number of keyboard accelerators to show for the first proposals. For
    /// example, to activate the first proposal, the user can press
    /// `<keycombo>``<keycap>`Alt`</keycap>``<keycap>`1`</keycap>``</keycombo>`.
    fn get_property_accelerators(&self) -> u32;

    /// Number of keyboard accelerators to show for the first proposals. For
    /// example, to activate the first proposal, the user can press
    /// `<keycombo>``<keycap>`Alt`</keycap>``<keycap>`1`</keycap>``</keycombo>`.
    fn set_property_accelerators(&self, accelerators: u32);

    /// Determines the popup delay (in milliseconds) at which the completion
    /// will be shown for interactive completion.
    fn get_property_auto_complete_delay(&self) -> u32;

    /// Determines the popup delay (in milliseconds) at which the completion
    /// will be shown for interactive completion.
    fn set_property_auto_complete_delay(&self, auto_complete_delay: u32);

    /// The scroll page size of the proposals in the completion window. In
    /// other words, when `<keycap>`PageDown`</keycap>` or
    /// `<keycap>`PageUp`</keycap>` is pressed, the selected
    /// proposal becomes the one which is located one page size backward or
    /// forward.
    ///
    /// See also the `Completion::move-cursor` signal.
    fn get_property_proposal_page_size(&self) -> u32;

    /// The scroll page size of the proposals in the completion window. In
    /// other words, when `<keycap>`PageDown`</keycap>` or
    /// `<keycap>`PageUp`</keycap>` is pressed, the selected
    /// proposal becomes the one which is located one page size backward or
    /// forward.
    ///
    /// See also the `Completion::move-cursor` signal.
    fn set_property_proposal_page_size(&self, proposal_page_size: u32);

    /// The scroll page size of the provider pages in the completion window.
    ///
    /// See the `Completion::move-page` signal.
    fn get_property_provider_page_size(&self) -> u32;

    /// The scroll page size of the provider pages in the completion window.
    ///
    /// See the `Completion::move-page` signal.
    fn set_property_provider_page_size(&self, provider_page_size: u32);

    /// Determines whether the visibility of the info window should be
    /// saved when the completion is hidden, and restored when the completion
    /// is shown again.
    fn get_property_remember_info_visibility(&self) -> bool;

    /// Determines whether the visibility of the info window should be
    /// saved when the completion is hidden, and restored when the completion
    /// is shown again.
    fn set_property_remember_info_visibility(&self, remember_info_visibility: bool);

    /// Determines whether the first proposal should be selected when the
    /// completion is first shown.
    fn get_property_select_on_show(&self) -> bool;

    /// Determines whether the first proposal should be selected when the
    /// completion is first shown.
    fn set_property_select_on_show(&self, select_on_show: bool);

    /// Determines whether provider headers should be shown in the proposal
    /// list. It can be useful to disable when there is only one provider.
    fn get_property_show_headers(&self) -> bool;

    /// Determines whether provider headers should be shown in the proposal
    /// list. It can be useful to disable when there is only one provider.
    fn set_property_show_headers(&self, show_headers: bool);

    /// Determines whether provider and proposal icons should be shown in
    /// the completion popup.
    fn get_property_show_icons(&self) -> bool;

    /// Determines whether provider and proposal icons should be shown in
    /// the completion popup.
    fn set_property_show_icons(&self, show_icons: bool);

    /// The `Completion::activate-proposal` signal is a
    /// keybinding signal which gets emitted when the user initiates
    /// a proposal activation.
    ///
    /// Applications should not connect to it, but may emit it with
    /// `g_signal_emit_by_name` if they need to control the proposal
    /// activation programmatically.
    fn connect_activate_proposal<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_activate_proposal(&self);

    /// Emitted when the completion window is hidden. The default handler
    /// will actually hide the window.
    fn connect_hide<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_hide(&self);

    //fn connect_move_cursor<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_move_page<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    /// Emitted just before starting to populate the completion with providers.
    /// You can use this signal to add additional attributes in the context.
    /// ## `context`
    /// The `CompletionContext` for the current completion
    fn connect_populate_context<F: Fn(&Self, &CompletionContext) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_populate_context(&self, context: &CompletionContext);

    /// Emitted when the completion window is shown. The default handler
    /// will actually show the window.
    fn connect_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_show(&self);

    fn connect_property_accelerators_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_auto_complete_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_proposal_page_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_provider_page_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_remember_info_visibility_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_select_on_show_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_headers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_icons_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Completion>> CompletionExt for O {
    fn add_provider<P: IsA<CompletionProvider>>(&self, provider: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gtk_source_sys::gtk_source_completion_add_provider(self.as_ref().to_glib_none().0, provider.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn block_interactive(&self) {
        unsafe {
            gtk_source_sys::gtk_source_completion_block_interactive(self.as_ref().to_glib_none().0);
        }
    }

    fn get_info_window(&self) -> Option<CompletionInfo> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_completion_get_info_window(self.as_ref().to_glib_none().0))
        }
    }

    fn get_providers(&self) -> Vec<CompletionProvider> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gtk_source_sys::gtk_source_completion_get_providers(self.as_ref().to_glib_none().0))
        }
    }

    fn get_view(&self) -> Option<View> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_completion_get_view(self.as_ref().to_glib_none().0))
        }
    }

    fn hide(&self) {
        unsafe {
            gtk_source_sys::gtk_source_completion_hide(self.as_ref().to_glib_none().0);
        }
    }

    fn remove_provider<P: IsA<CompletionProvider>>(&self, provider: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gtk_source_sys::gtk_source_completion_remove_provider(self.as_ref().to_glib_none().0, provider.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn start<P: IsA<CompletionContext>>(&self, providers: &[CompletionProvider], context: &P) -> bool {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_completion_start(self.as_ref().to_glib_none().0, providers.to_glib_none().0, context.as_ref().to_glib_none().0))
        }
    }

    fn unblock_interactive(&self) {
        unsafe {
            gtk_source_sys::gtk_source_completion_unblock_interactive(self.as_ref().to_glib_none().0);
        }
    }

    fn get_property_accelerators(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"accelerators\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_accelerators(&self, accelerators: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"accelerators\0".as_ptr() as *const _, Value::from(&accelerators).to_glib_none().0);
        }
    }

    fn get_property_auto_complete_delay(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"auto-complete-delay\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_auto_complete_delay(&self, auto_complete_delay: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"auto-complete-delay\0".as_ptr() as *const _, Value::from(&auto_complete_delay).to_glib_none().0);
        }
    }

    fn get_property_proposal_page_size(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"proposal-page-size\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_proposal_page_size(&self, proposal_page_size: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"proposal-page-size\0".as_ptr() as *const _, Value::from(&proposal_page_size).to_glib_none().0);
        }
    }

    fn get_property_provider_page_size(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"provider-page-size\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_provider_page_size(&self, provider_page_size: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"provider-page-size\0".as_ptr() as *const _, Value::from(&provider_page_size).to_glib_none().0);
        }
    }

    fn get_property_remember_info_visibility(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"remember-info-visibility\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_remember_info_visibility(&self, remember_info_visibility: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"remember-info-visibility\0".as_ptr() as *const _, Value::from(&remember_info_visibility).to_glib_none().0);
        }
    }

    fn get_property_select_on_show(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"select-on-show\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_select_on_show(&self, select_on_show: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"select-on-show\0".as_ptr() as *const _, Value::from(&select_on_show).to_glib_none().0);
        }
    }

    fn get_property_show_headers(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-headers\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_headers(&self, show_headers: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-headers\0".as_ptr() as *const _, Value::from(&show_headers).to_glib_none().0);
        }
    }

    fn get_property_show_icons(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-icons\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_icons(&self, show_icons: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-icons\0".as_ptr() as *const _, Value::from(&show_icons).to_glib_none().0);
        }
    }

    fn connect_activate_proposal<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_proposal_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"activate-proposal\0".as_ptr() as *const _,
                Some(transmute(activate_proposal_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_activate_proposal(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject).emit("activate-proposal", &[]).unwrap() };
    }

    fn connect_hide<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide\0".as_ptr() as *const _,
                Some(transmute(hide_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_hide(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject).emit("hide", &[]).unwrap() };
    }

    //fn connect_move_cursor<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored step: Gtk.ScrollStep
    //}

    //fn connect_move_page<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored step: Gtk.ScrollStep
    //}

    fn connect_populate_context<F: Fn(&Self, &CompletionContext) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn populate_context_trampoline<P, F: Fn(&P, &CompletionContext) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, context: *mut gtk_source_sys::GtkSourceCompletionContext, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(context))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"populate-context\0".as_ptr() as *const _,
                Some(transmute(populate_context_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_populate_context(&self, context: &CompletionContext) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject).emit("populate-context", &[&context]).unwrap() };
    }

    fn connect_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show\0".as_ptr() as *const _,
                Some(transmute(show_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_show(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject).emit("show", &[]).unwrap() };
    }

    fn connect_property_accelerators_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_accelerators_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::accelerators\0".as_ptr() as *const _,
                Some(transmute(notify_accelerators_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_auto_complete_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_auto_complete_delay_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::auto-complete-delay\0".as_ptr() as *const _,
                Some(transmute(notify_auto_complete_delay_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_proposal_page_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_proposal_page_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::proposal-page-size\0".as_ptr() as *const _,
                Some(transmute(notify_proposal_page_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_provider_page_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_provider_page_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::provider-page-size\0".as_ptr() as *const _,
                Some(transmute(notify_provider_page_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_remember_info_visibility_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remember_info_visibility_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::remember-info-visibility\0".as_ptr() as *const _,
                Some(transmute(notify_remember_info_visibility_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_select_on_show_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_select_on_show_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::select-on-show\0".as_ptr() as *const _,
                Some(transmute(notify_select_on_show_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_show_headers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_headers_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::show-headers\0".as_ptr() as *const _,
                Some(transmute(notify_show_headers_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_show_icons_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_icons_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::show-icons\0".as_ptr() as *const _,
                Some(transmute(notify_show_icons_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Completion {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Completion")
    }
}
