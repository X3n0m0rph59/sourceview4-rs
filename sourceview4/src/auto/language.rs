// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Language(Object<gtk_source_sys::GtkSourceLanguage, gtk_source_sys::GtkSourceLanguageClass, LanguageClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_language_get_type(),
    }
}

pub const NONE_LANGUAGE: Option<&Language> = None;

/// Trait containing all `Language` methods.
///
/// # Implementors
///
/// [`Language`](struct.Language.html)
pub trait LanguageExt: 'static {
    /// Returns the globs associated to this language. This is just
    /// an utility wrapper around `LanguageExt::get_metadata` to
    /// retrieve the "globs" metadata property and split it into an array.
    ///
    /// # Returns
    ///
    ///
    /// a newly-allocated `None` terminated array containing the globs or `None`
    /// if no globs are found.
    /// The returned array must be freed with `g_strfreev`.
    fn get_globs(&self) -> Vec<GString>;

    /// Returns whether the language should be hidden from the user.
    ///
    /// # Returns
    ///
    /// `true` if the language should be hidden, `false` otherwise.
    fn get_hidden(&self) -> bool;

    /// Returns the ID of the language. The ID is not locale-dependent.
    /// The returned string is owned by `self` and should not be freed
    /// or modified.
    ///
    /// # Returns
    ///
    /// the ID of `self`.
    fn get_id(&self) -> Option<GString>;

    /// ## `name`
    /// metadata property name.
    ///
    /// # Returns
    ///
    /// value of property `name` stored in
    /// the metadata of `self` or `None` if language does not contain the
    /// specified metadata property.
    /// The returned string is owned by `self` and should not be freed
    /// or modified.
    fn get_metadata(&self, name: &str) -> Option<GString>;

    /// Returns the mime types associated to this language. This is just
    /// an utility wrapper around `LanguageExt::get_metadata` to
    /// retrieve the "mimetypes" metadata property and split it into an
    /// array.
    ///
    /// # Returns
    ///
    ///
    /// a newly-allocated `None` terminated array containing the mime types
    /// or `None` if no mime types are found.
    /// The returned array must be freed with `g_strfreev`.
    fn get_mime_types(&self) -> Vec<GString>;

    /// Returns the localized name of the language.
    /// The returned string is owned by `self` and should not be freed
    /// or modified.
    ///
    /// # Returns
    ///
    /// the name of `self`.
    fn get_name(&self) -> Option<GString>;

    /// Returns the localized section of the language.
    /// Each language belong to a section (ex. HTML belogs to the
    /// Markup section).
    /// The returned string is owned by `self` and should not be freed
    /// or modified.
    ///
    /// # Returns
    ///
    /// the section of `self`.
    fn get_section(&self) -> Option<GString>;

    /// Returns the ID of the style to use if the specified `style_id`
    /// is not present in the current style scheme.
    /// ## `style_id`
    /// a style ID.
    ///
    /// # Returns
    ///
    /// the ID of the style to use if the
    /// specified `style_id` is not present in the current style scheme or `None`
    /// if the style has no fallback defined.
    /// The returned string is owned by the `self` and must not be modified.
    fn get_style_fallback(&self, style_id: &str) -> Option<GString>;

    /// Returns the ids of the styles defined by this `self`.
    ///
    /// # Returns
    ///
    ///
    /// a newly-allocated `None` terminated array containing ids of the
    /// styles defined by this `self` or `None` if no style is defined.
    /// The returned array must be freed with `g_strfreev`.
    fn get_style_ids(&self) -> Vec<GString>;

    /// Returns the name of the style with ID `style_id` defined by this `self`.
    /// ## `style_id`
    /// a style ID.
    ///
    /// # Returns
    ///
    /// the name of the style with ID `style_id`
    /// defined by this `self` or `None` if the style has no name or there is no
    /// style with ID `style_id` defined by this `self`.
    /// The returned string is owned by the `self` and must not be modified.
    fn get_style_name(&self, style_id: &str) -> Option<GString>;

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_section_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Language>> LanguageExt for O {
    fn get_globs(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gtk_source_sys::gtk_source_language_get_globs(self.as_ref().to_glib_none().0))
        }
    }

    fn get_hidden(&self) -> bool {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_language_get_hidden(self.as_ref().to_glib_none().0))
        }
    }

    fn get_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_language_get_id(self.as_ref().to_glib_none().0))
        }
    }

    fn get_metadata(&self, name: &str) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_language_get_metadata(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_mime_types(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gtk_source_sys::gtk_source_language_get_mime_types(self.as_ref().to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_language_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_section(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_language_get_section(self.as_ref().to_glib_none().0))
        }
    }

    fn get_style_fallback(&self, style_id: &str) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_language_get_style_fallback(self.as_ref().to_glib_none().0, style_id.to_glib_none().0))
        }
    }

    fn get_style_ids(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gtk_source_sys::gtk_source_language_get_style_ids(self.as_ref().to_glib_none().0))
        }
    }

    fn get_style_name(&self, style_id: &str) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_language_get_style_name(self.as_ref().to_glib_none().0, style_id.to_glib_none().0))
        }
    }

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hidden_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceLanguage, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Language>
        {
            let f: &F = &*(f as *const F);
            f(&Language::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hidden\0".as_ptr() as *const _,
                Some(transmute(notify_hidden_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceLanguage, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Language>
        {
            let f: &F = &*(f as *const F);
            f(&Language::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::id\0".as_ptr() as *const _,
                Some(transmute(notify_id_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceLanguage, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Language>
        {
            let f: &F = &*(f as *const F);
            f(&Language::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute(notify_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_section_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_section_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceLanguage, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Language>
        {
            let f: &F = &*(f as *const F);
            f(&Language::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::section\0".as_ptr() as *const _,
                Some(transmute(notify_section_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Language {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Language")
    }
}
