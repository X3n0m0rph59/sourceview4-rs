// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct UndoManager(Interface<gtk_source_sys::GtkSourceUndoManager>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_undo_manager_get_type(),
    }
}

pub const NONE_UNDO_MANAGER: Option<&UndoManager> = None;

/// Trait containing all `UndoManager` methods.
///
/// # Implementors
///
/// [`UndoManager`](struct.UndoManager.html)
pub trait UndoManagerExt: 'static {
    /// Begin a not undoable action on the buffer. All changes between this call
    /// and the call to `UndoManager::end_not_undoable_action` cannot
    /// be undone. This function should be re-entrant.
    fn begin_not_undoable_action(&self);

    /// Get whether there are redo operations available.
    ///
    /// # Returns
    ///
    /// `true` if there are redo operations available, `false` otherwise
    fn can_redo(&self) -> bool;

    /// Emits the `UndoManager::can-redo-changed` signal.
    fn can_redo_changed(&self);

    /// Get whether there are undo operations available.
    ///
    /// # Returns
    ///
    /// `true` if there are undo operations available, `false` otherwise
    fn can_undo(&self) -> bool;

    /// Emits the `UndoManager::can-undo-changed` signal.
    fn can_undo_changed(&self);

    /// Ends a not undoable action on the buffer.
    fn end_not_undoable_action(&self);

    /// Perform a single redo. Calling this function when there are no redo operations
    /// available is an error. Use `UndoManager::can_redo` to find out
    /// if there are redo operations available.
    fn redo(&self);

    /// Perform a single undo. Calling this function when there are no undo operations
    /// available is an error. Use `UndoManager::can_undo` to find out
    /// if there are undo operations available.
    fn undo(&self);

    /// Emitted when the ability to redo has changed.
    fn connect_can_redo_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_can_redo_changed(&self);

    /// Emitted when the ability to undo has changed.
    fn connect_can_undo_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_can_undo_changed(&self);
}

impl<O: IsA<UndoManager>> UndoManagerExt for O {
    fn begin_not_undoable_action(&self) {
        unsafe {
            gtk_source_sys::gtk_source_undo_manager_begin_not_undoable_action(self.as_ref().to_glib_none().0);
        }
    }

    fn can_redo(&self) -> bool {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_undo_manager_can_redo(self.as_ref().to_glib_none().0))
        }
    }

    fn can_redo_changed(&self) {
        unsafe {
            gtk_source_sys::gtk_source_undo_manager_can_redo_changed(self.as_ref().to_glib_none().0);
        }
    }

    fn can_undo(&self) -> bool {
        unsafe {
            from_glib(gtk_source_sys::gtk_source_undo_manager_can_undo(self.as_ref().to_glib_none().0))
        }
    }

    fn can_undo_changed(&self) {
        unsafe {
            gtk_source_sys::gtk_source_undo_manager_can_undo_changed(self.as_ref().to_glib_none().0);
        }
    }

    fn end_not_undoable_action(&self) {
        unsafe {
            gtk_source_sys::gtk_source_undo_manager_end_not_undoable_action(self.as_ref().to_glib_none().0);
        }
    }

    fn redo(&self) {
        unsafe {
            gtk_source_sys::gtk_source_undo_manager_redo(self.as_ref().to_glib_none().0);
        }
    }

    fn undo(&self) {
        unsafe {
            gtk_source_sys::gtk_source_undo_manager_undo(self.as_ref().to_glib_none().0);
        }
    }

    fn connect_can_redo_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn can_redo_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceUndoManager, f: glib_sys::gpointer)
            where P: IsA<UndoManager>
        {
            let f: &F = &*(f as *const F);
            f(&UndoManager::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"can-redo-changed\0".as_ptr() as *const _,
                Some(transmute(can_redo_changed_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_can_redo_changed(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject).emit("can-redo-changed", &[]).unwrap() };
    }

    fn connect_can_undo_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn can_undo_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceUndoManager, f: glib_sys::gpointer)
            where P: IsA<UndoManager>
        {
            let f: &F = &*(f as *const F);
            f(&UndoManager::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"can-undo-changed\0".as_ptr() as *const _,
                Some(transmute(can_undo_changed_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_can_undo_changed(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject).emit("can-undo-changed", &[]).unwrap() };
    }
}

impl fmt::Display for UndoManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "UndoManager")
    }
}
